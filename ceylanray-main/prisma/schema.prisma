// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PackageWithoutOffers {
  id          String           @id @default(uuid())
  title       String
  description String
  image       String
  price       String
  duration    String
  category    String
  interests   String[]
  inclusions  String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  bookings    PackageBooking[]
  allPackages AllPackages[] @relation("NoOfferToAllPackages")
}

model PackageBooking {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  email     String
  phone     String
  message   String?
  packageId String?
  package   PackageWithoutOffers?  @relation(fields: [packageId], references: [id])

  // Add these lines for the new relation
  packageWithOffersId String?
  packageWithOffers   PackageWithOffers? @relation("PackageWithOffersToBooking", fields: [packageWithOffersId], references: [id])
  isCompleted         Boolean  @default(false)
}

model Destination {
  id               String   @id @default(uuid())
  destination_id   String   @unique
  destination      String
  destination_name String
  description      String
  image_url        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model HotelBooking {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  name            String
  email           String
  phone           String
  hotel_name      String
  checkIn         DateTime
  checkOut        DateTime
  roomType        String
  numGuests       String
  specialRequests String?
  isCompleted     Boolean  @default(false)
}

model Hotel {
  id        String   @id @default(uuid())
  name      String   @unique
  location  String?
  image     String?
  roomType  String?
  roomTypes String[] // Array of room types for this hotel
  starRating String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]   // Relation: one hotel has many rooms
}

model Room {
  id        String   @id @default(uuid())
  name      String
  type      String?
  price     Float?
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  hotelId   String   // Foreign key
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model PackageWithOffers {
  id               String   @id @default(uuid())
  title            String
  description      String?
  priceWithOffer   String
  priceWithoutOffer String
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  duration         String
  imageURL         String
  category         String
  interests        String
  inclutions       String
  bookings         PackageBooking[] @relation("PackageWithOffersToBooking")
  allPackages      AllPackages[] @relation("OfferToAllPackages")
}

model AllPackages {
  id                   String   @id @default(uuid())
  title                String
  description          String?
  type                 String   // "offer" or "no-offer"
  packageWithOffersId  String?  // nullable, if this is an offer package
  packageWithoutOffersId String? // nullable, if this is a non-offer package
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  packageWithOffers    PackageWithOffers?   @relation("OfferToAllPackages", fields: [packageWithOffersId], references: [id])
  packageWithoutOffers PackageWithoutOffers? @relation("NoOfferToAllPackages", fields: [packageWithoutOffersId], references: [id])
}

model AirTicketBooking {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Booking Details
  bookingMode     String   // "Single" or "Multiple"
  tripType        String   // "One-way" or "Round-trip"
  flightClass     String   // "Economy", "Business", "First Class"
  
  // Flight Details
  departureCity   String
  arrivalCity     String
  departureDate   DateTime
  returnDate      DateTime? // Optional for one-way trips
  
  // Passenger Counts
  adults          Int      @default(1)
  children        Int      @default(0)
  totalPassengers Int
  
  // Special Requests
  specialAssistance String?
  mealPreference    String?
  
  // Status
  isCompleted     Boolean  @default(false)
  
  // Passengers (one-to-many relationship)
  passengers       Passenger[]
}

model Passenger {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  
  // Passenger Details
  fullName          String
  email             String
  phone             String
  passport          String
  
  // Relationship to AirTicketBooking
  airTicketBooking  AirTicketBooking @relation(fields: [airTicketBookingId], references: [id], onDelete: Cascade)
  airTicketBookingId String
}
