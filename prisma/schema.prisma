generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PackageWithoutOffers {
  id          String           @id @default(uuid())
  title       String
  description String
  image       String
  price       String
  duration    String
  category    String
  interests   String[]
  inclusions  String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  allPackages AllPackages[]    @relation("NoOfferToAllPackages")
  bookings    PackageBooking[]
}

model PackageBooking {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now())
  name                String
  email               String
  phone               String
  message             String?
  packageId           String?
  packageWithOffersId String?
  isCompleted         Boolean               @default(false)
  package             PackageWithoutOffers? @relation(fields: [packageId], references: [id])
  packageWithOffers   PackageWithOffers?    @relation("PackageWithOffersToBooking", fields: [packageWithOffersId], references: [id])
}

model Destination {
  id               String   @id @default(uuid())
  destination_id   String   @unique
  destination      String
  destination_name String
  description      String
  image_url        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model HotelBooking {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  name            String
  email           String
  phone           String
  hotel_name      String
  checkIn         DateTime
  checkOut        DateTime
  roomType        String
  numGuests       String
  specialRequests String?
  isCompleted     Boolean  @default(false)
}

model Hotel {
  id         String   @id @default(uuid())
  name       String   @unique
  location   String?
  image      String?
  roomType   String?
  starRating String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  roomTypes  String[]
  rooms      Room[]
}

model Room {
  id        String   @id @default(uuid())
  name      String
  type      String?
  price     Float?
  hotelId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
}

model Admin {
  id        String   @id
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model PackageWithOffers {
  id                String           @id @default(uuid())
  title             String
  description       String?
  priceWithOffer    String
  priceWithoutOffer String
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  duration          String
  imageURL          String
  category          String
  interests         String
  inclutions        String
  allPackages       AllPackages[]    @relation("OfferToAllPackages")
  bookings          PackageBooking[] @relation("PackageWithOffersToBooking")
}

model AllPackages {
  id                     String                @id @default(uuid())
  title                  String
  description            String?
  type                   String
  packageWithOffersId    String?
  packageWithoutOffersId String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  packageWithOffers      PackageWithOffers?    @relation("OfferToAllPackages", fields: [packageWithOffersId], references: [id])
  packageWithoutOffers   PackageWithoutOffers? @relation("NoOfferToAllPackages", fields: [packageWithoutOffersId], references: [id])
}

model AirTicketBooking {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  bookingMode       String
  tripType          String
  flightClass       String
  departureCity     String
  arrivalCity       String
  departureDate     DateTime
  returnDate        DateTime?
  adults            Int         @default(1)
  children          Int         @default(0)
  totalPassengers   Int
  specialAssistance String?
  mealPreference    String?
  isCompleted       Boolean     @default(false)
  passengers        Passenger[]
}

model Passenger {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  fullName           String
  email              String
  phone              String
  passport           String
  airTicketBookingId String
  airTicketBooking   AirTicketBooking @relation(fields: [airTicketBookingId], references: [id], onDelete: Cascade)
}
